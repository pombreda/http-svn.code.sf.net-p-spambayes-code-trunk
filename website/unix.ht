Title: SpamBayes: Unix/Linux platform
Author-Email: spambayes@python.org
Author: spambayes

<h1>Spambayes on Unix or Linux</h1>

<p>There is no direct mail client integration on Unix and Linux
systems<sup><font size="-2">1</font></sup>.  You must make sure a <a
href="download.html">recent enough version of Python</a> is installed, then
install the Spambayes source either as a <a
href="https://sourceforge.net/project/showfiles.php?group_id=61702">bundled
package</a> or <a href="https://sourceforge.net/svn/?group_id=61702">from
Subversion</a>, then choose the Spambayes application which best fits into your
mail setup.</p>

<h2>Procmail</h2>

<p>If you use <a href="http://www.procmail.org/">procmail</a> as your local
delivery agent and your email package picks up your primary mail from a
local spool file (e.g. <code>/var/spool/mail</code>), you will probably find
sb_filter.py the easiest application to integrate into your mail
environment.</p>
<p>An example setup is as follows (thanks to Alister Forbes for contributing this).
Note that the path to the sb_filter script will be the same as the prefix
you used when installing Python, which is probably /usr when you installed
Python using your OS's package management software, and is more likely to
be /usr/local if you built your own. You can refer to the output of
"setup.py install" to find the location.</p>

<ol>
<li>Install spambayes with the usual <pre>setup.py install</pre></li>
<li>Create the database that spambayes will use to test your incoming mail:
<pre>/usr/local/bin/sb_filter.py -d $HOME/.hammie.db -n</pre></li>
<li>Train it on your existing mail. This is optional, but a good idea. -g is the flag for the known good mail, and -s is for known spam 
<pre>/usr/local/bin/sb_mboxtrain.py -d $HOME/.hammie.db -g $HOME/Mail/inbox -s $HOME/Mail/spam</pre></li>
<li>Adding the following recipes to the top of your .procmailrc will get the spam and unsure stuff out of the way. Allowing everything else to be filtered as per your normal procmail recipes.
<pre>
      :0fw:hamlock
      | /usr/local/bin/sb_filter.py -d $HOME/.hammie.db

      :0
      * ^X-Spambayes-Classification: spam 
      ${MAILDIR}/spam
      
      :0
      * ^X-Spambayes-Classification: unsure
      ${MAILDIR}/unsure
</pre>
</li>
<li>For ongoing training, there is a handy little cronjob that will run at 2:21 am every morning, training the database with good mail from Inbox and spam from caughtspam. Just add the following to your crontab
<pre>21 2 * * * /usr/local/bin/sb_mboxtrain.py -d $HOME/.hammie.db -g $HOME/Mail/Inbox -s $HOME/Mail/spam</pre>
</li>
</ol>
<p>Additional details are available in the <a
href="http://spambayes.svn.sourceforge.net/viewvc/*checkout*/spambayes/trunk/spambayes/README.txt">README</a>
file.</p>

<h2>POP3</h2>

<p>If your mail program fetches mail using POP3, then you should run <a
href="applications.html#sb_server">sb_server.py</a>.</p>

<p>You might wish to set sb_server.py to run as a daemon - Fernando Nino and
Dave Handley have provided these scripts (respectively) which will allow you
to do this:</p>
<pre>
#!/bin/bash
#
# spambayes:    Starts the spam filter as a pop3 proxy
#
# Version:      @(#) /etc/init.d/spambayes 1.0
#
# chkconfig: - 95 21
# description: This shell script takes care of starting and stopping \
#              spambayes pop3 proxy
# processname: sb_server.py
#
# Source function library.
. /etc/init.d/functions

SBPROXY=/opt/bin/sb_server.py
SBLOG=/var/log/spam.log
SBDIR=/opt/sb_data

[ -x $SBPROXY ] || exit 0

RETVAL=0

start () {
    date >> $SBLOG
    echo -n "Starting SpamBayes POP3 proxy: "
    if [ ! -d $SBDIR ] ; then
      echo "Repertoire $SBDIR non present" >> $SBLOG
      RETVAL=1
    else 
      cd $SBDIR
      ($SBPROXY 2>&1 >> $SBLOG) &
      RETVAL=$?
    fi
    action "" [ $RETVAL = 0 ]
    return $RETVAL
}

stop () {
    # stop daemon
    date >> $SBLOG
    echo -n "Stopping SpamBayes POP3 proxy: "
    killproc $SBPROXY 1
    RETVAL=$?
    echo 
      [ $RETVAL = 0 ] 
    return $RETVAL
}

restart () {
    stop
    start
    RETVAL=$?
    return $RETVAL
}

# See how we were called.
case "$1" in
    start)
	start
	;;
    stop)
	stop
	;;
    status)
	status $SBPROXY
	RETVAL=$?
	;;
    restart)
	restart
	;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        RETVAL=1
esac

exit $RETVAL
</pre>
<br/>
<pre>
#!/bin/sh
#
# spamd         This shell script takes care of starting and stopping
#               the spambayes deamon.
#
# Author:       Dave Handley
# Date:         11 Oct 03
#

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

RETVAL=0

# See how we were called.
case "$1" in
  start)
	# Start daemons.
	echo -n "Starting spamd: "
	cd /etc/spamd/
	daemon /usr/local/bin/sb_server.py &
	RETVAL=$?
	echo
	;;
  stop)
	# Stop daemons.
	echo -n "Shutting down spamd: "
	killproc sb_server.py
	RETVAL=$?
	echo
	;;
  restart|reload)
	$0 stop
	$0 start
	RETVAL=$?
	;;
  status)
	status sb_server.py
	RETVAL=$?
	;;
  *)
	echo "Usage: spamd {start|stop|restart|status}"
	exit 1
esac

exit $RETVAL
</pre>

<h2>Thunderbird</h2>

<p>Thunderbird users might find the <a
href="http://pieces.openpolitics.com/thunderbayes/">ThunderBayes extension
useful.  It provides tighter integrateion between Thunderbird and the
SpamBayes POP3 proxy.</p>

<h2>KMail</h2>
<p>Toby Dickenson has written a <a href="http://www.tarind.com/kmailsb.html">
description of his SpamBayes and KMail setup</a> (using sb_bnfilter.py),
which is an effective guide to setting up your system if you are a KMail
user.</p>

<h2>IMAP</h2>

<p>If your mail program fetches mail using IMAP, then you should run
<a href="applications.html#imap">imapfilter.py</a>.</p>

<h2>Training</h2>

<p>See the <a
href="http://spambayes.svn.sourceforge.net/viewvc/*checkout*/spambayes/trunk/spambayes/README.txt">
README file</a>for a detailed discussion of the many training options
on Unix systems.</p>

<h2>Notes</h2>

<ol>
  <li> If you're a Unix weenie using a Mac OS X system, this page is
  probably more appropriate than the <a href="mac.html">Mac page</a>.
</ol>

<h2>exmh</h2>

<p>The following short guide will help you set up a new message menu on
exmh - this adds a menu containing "Train as Spam" and "Train as Ham"
options.</p>

<ol>
  <li> First of all, create the directory <tt>~/.tk/exmh</tt> if you 
  haven't already done so. Put the following file (I call mine spambayes.tcl)
  in there:</li>
<pre>
proc SB_SpamTrain { } {
    global exmh msg mhProfile 
    Ftoc_Iterate line {
        set msgid [ Ftoc_MsgNumber $line ]
        eval {MhExec sb_filter.py -s $mhProfile(path)/$exmh(folder)/$msgid } 
    }
}

proc SB_HamTrain { } {
    global exmh msg mhProfile 
    Ftoc_Iterate line {
        set msgid [ Ftoc_MsgNumber $line ]
        eval {MhExec sb_filter.py -g $mhProfile(path)/$exmh(folder)/$msgid } 
    }
}
</pre> 

  <li>Then run 'wish' or 'tclsh', and enter the following command:</li>
<pre>
auto_mkindex ~/.tk/exmh *.tcl
</pre>

  <li>Next, we hook up the commands that we just created. Shut down your exmh
  and edit <tt>~/.exmh/exmh-defaults</tt>. Add the following entries:</li>
<pre>
*Mops.umenulist: spam
*Mops.spam.text: S-B
*Mops.spam.m.entrylist: trainspam trainham 
*Mops.spam.m.l_trainspam: Train as Spam
*Mops.spam.m.c_trainspam: SB_SpamTrain
*Mops.spam.m.l_trainham: Train as Ham
*Mops.spam.m.c_trainham: SB_HamTrain
</pre>

  <li>Restart exmh, and you're done.</li>
</ol>
